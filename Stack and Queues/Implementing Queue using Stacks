Intuition
Intuition is very simple we have to implement the queue using stack.
For that we are taking 2 stacks, one stack will do the operation in the same manner as the stack does then when we push the elements from the stack1 to stack, it behaves something like queue which you can verify too using queue operation separately on the same given elements!

Approach
Stack is a data structure which performs Last in Fist Out operation.
Implementing queue operation using two stacks.
Push operation
In order to push check, if the stack is empty, if yes then assign element to be pushed(x) to the front variable which is used to keep track of the first element that was added to the stack, which is useful when implementing a queue, as the first element added is the first one to be removed (FIFO order). and just simply push the element to the stack.
Pop Operation
Check if the stack2 is empty, if yes then unless and until stack1 becomes empty, keep on pushing the elements from s1 to s2.
Then just simply s2.pop()
Peek()
Check if the s2 is empty then the peek element is simply the front element if not then s2.peek();
Empty()
If both the stacks are empty then return true otherwise false.

Complexity
Time complexity:
O(1)
for all operations

Space complexity:
O(N), where N is the number of elements in the queue.

import java.util.Stack;
class MyQueue{
    Stack<Integer>s1;
    Stack<Integer>s2;
    int front = 0;

    public MyQueue(){
        this.s1 = new Stack<>();
        this.s2 = new Stack<>();
    }

    public void push(int x){
        if(s1.empty()){
            front = x;
        }
        s1.push(x);
    }

    public int pop(){
        if(s2.empty()){
            while(!s1.empty()){
                s2.push(s1.pop());
            }
        }
        return s2.pop();
    }

    public int peek(){
        return s2.empty()?front:s2.peek();
    }

    public boolean empty(){
        return s1.empty() && s2.empty();
    }
}
