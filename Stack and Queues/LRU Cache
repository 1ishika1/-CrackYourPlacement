Intuition
The LRU (Least Recently Used) cache is designed to manage a fixed amount of cache storage in such a way that the least recently accessed items are removed first when new items need to be added. To achieve this, the LRU cache can be implemented using a combination of a hash map and a doubly linked list:

HashMap: Allows quick access to the nodes representing the cached items by their keys.
Doubly Linked List: Maintains the order of access. The most recently used items are moved to the front, while the least recently used items are at the back. This makes it easy to remove the least recently used items in O(1) time.

Approach
Data Structures:

A HashMap to store the key-node pairs, providing O(1) access to any node by its key.
A Doubly Linked List to maintain the order of access, allowing O(1) insertion and removal of nodes.
Node Class:

A helper class Node to represent each entry in the doubly linked list. It contains attributes for the key, value, and pointers to the previous and next nodes.
Linked List Operations:

Remove: Removes a node from the doubly linked list.
Insert: Inserts a node right after the head of the linked list, making it the most recently used item.
Cache Operations:

Get:
If the key exists in the hash map, move the corresponding node to the front of the linked list (marking it as recently used) and return the value.
If the key does not exist, return -1.

Put:
If the key already exists, update the value and move the node to the front of the linked list.
If the key does not exist, create a new node. If the cache exceeds its capacity, remove the least recently used item from both the linked list and the hash map.
Insert the new node at the front of the linked list and add it to the hash map.


class LRUCache {
    Node head = new Node(0, 0), tail = new Node(0, 0);
    Map < Integer, Node > map = new HashMap();
    int capacity;

    public LRUCache(int _capacity) {
        capacity = _capacity;
        head.next = tail;
        tail.prev = head;
    }

    public int get(int key) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            remove(node);
            insert(node);
            return node.value;
        } else {
            return -1;
        }
    }

    public void put(int key, int value) {
        if (map.containsKey(key)) {
            remove(map.get(key));
        }
        if (map.size() == capacity) {
            remove(tail.prev);
        }
        insert(new Node(key, value));
    }

    private void remove(Node node) {
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    private void insert(Node node) {
        map.put(node.key, node);
        node.next = head.next;
        node.next.prev = node;
        head.next = node;
        node.prev = head;
    }

    class Node {
        Node prev, next;
        int key, value;
        Node(int _key, int _value) {
            key = _key;
            value = _value;
        }
    }
}

